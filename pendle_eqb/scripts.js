const EQB_PENDLE_BOOSTER_ADDRESS = "0x4D32C8Ff2fACC771eC7Efc70d6A8468bC30C26bF";
const DEFAULT_RPC_ETHEREUM = "https://rpc.ankr.com/eth";
            
const RPC_PROVIDER = new ethers.providers.JsonRpcProvider(DEFAULT_RPC_ETHEREUM);

let EQB_PENDLE_BOOSTER;
let EQBPoolDetails = saved_eqb_pools;
let EQBPoolLength;
let EQBPoolLength_local;
let EQB_pool_local_last_updated;
let printAll = false;

// force: must update even the EQBPoolLength > 0
async function updateEQBPendleBooster(force = false) {
    EQBPoolLength_local = saved_eqb_pools.length;
    EQB_pool_local_last_updated = formatTimeUTC(saved_eqb_pools_updated_at)
    if (!force && EQB_PENDLE_BOOSTER && EQBPoolLength !== 0) {
        return;
    }
    EQB_PENDLE_BOOSTER = new ethers.Contract(EQB_PENDLE_BOOSTER_ADDRESS, abi_iequilibria_pendle_booster_mainchain, RPC_PROVIDER);
    EQBPoolLength = await EQB_PENDLE_BOOSTER.poolLength();
}

async function getEQBPoolInfoByPid(pid){
    const poolInfo = await EQB_PENDLE_BOOSTER.poolInfo(pid);
    const ipMarketContract = new ethers.Contract(poolInfo.market, abi_ipmarket, RPC_PROVIDER);
    const [SY, PT, YT] = await ipMarketContract.readTokens();
    const expiryTimestamp = await ipMarketContract.expiry();
    const sy = new ethers.Contract(SY, abi_erc20metadata, RPC_PROVIDER);
    const sysymbol = await sy.symbol();
    const expiryFormatted = formatTimeUTC(expiryTimestamp);

    const poolInfoJSON = {
        "eqb_pid": pid,
        "pendle_lpt": poolInfo.market,
        "pendle_lpt_expiry": expiryFormatted,
        "sy_symbol": sysymbol,
        "pendle_SY": SY,
        "pendle_PT": PT,
        "pendle_YT": YT,
        "eqb_token": poolInfo.token,
        "eqb_reward_pool": poolInfo.rewardPool
    };

    return poolInfoJSON;
}

function saveEQBPoolsResultAsJSFile(output) {
    const timestamp = Math.floor(Date.now()/1000);
    const jsContent = `// generated by: https://0xvanfer.github.io/protocol_tools/pendle_eqb/eqb_pools.html
const saved_eqb_pools = ${output};

const saved_eqb_pools_updated_at = ${timestamp};`;

    const blob = new Blob([jsContent], { type: 'application/javascript' });

    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = 'saved_eqb_pools.js';
    link.click();
}

function formatEQBPoolJSON2Output(info, printAll = true){
    let output = "";
    output += `  {\n`;
    output += `    "eqb_pid": "${info.eqb_pid}",\n`;
    output += `    "pendle_lpt": "${info.pendle_lpt}",\n`;
    output += `    "pendle_lpt_expiry": "${info.pendle_lpt_expiry}",\n`;
    if (printAll){
        output += `    "sy_symbol": "${info.sy_symbol}",\n`;
        output += `    "pendle_SY": "${info.pendle_SY}",\n`;
        output += `    "pendle_PT": "${info.pendle_PT}",\n`;
        output += `    "pendle_YT": "${info.pendle_YT}",\n`;
        output += `    "eqb_token": "${info.eqb_token}",\n`;
    }
    output += `    "eqb_reward_pool": "${info.eqb_reward_pool}",\n`;
    output += `  }`;
    return output;
}

async function updateEQBPendleDetails(forceUpdatePoolLength, printDetails){
    await updateEQBPendleBooster(forceUpdatePoolLength)

    if (!printDetails && EQBPoolLength == EQBPoolDetails.length){
        return 
    }

    let maxPools = EQBPoolLength;
    let startID = EQBPoolDetails.length;

    let output = `[\n`;
    for (let i = 0; i < startID; i++) {
        const info = EQBPoolDetails[i];
        output += formatEQBPoolJSON2Output(info, true);
        if (i < startID - 1) output += `,\n`;
    }

    if (startID > 0) {
        if (startID < maxPools) output += `,`;
        output += `\n`;
    }

    if (printDetails) setElementValueAndScrollDown("output", output);

    for (let i = startID; i < maxPools; i++) {
        const poolInfoJSON = await getEQBPoolInfoByPid(i)
        output += formatEQBPoolJSON2Output(poolInfoJSON, true);
        EQBPoolDetails = [...EQBPoolDetails, poolInfoJSON]
        if (i < maxPools - 1) output += `,`;
        output += `\n`;
        if (printDetails) setElementValueAndScrollDown("output", output);
    }

    output += `]`;
    if (printDetails) setElementValueAndScrollDown("output", output + "\n");
    return output
}